name: CI/CD Dev Environment

on:
  push:
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  DEPLOYMENT_NAME: ${{ secrets.SERVICE_NAME }}
  CONTAINER_NAME: ${{ secrets.SERVICE_NAME }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/invoiceease/${{ github.event.repository.name }}
  ENV_DEPLOY: dev
  GCP_PROJECT_KEY: ${{ secrets.GCP_PROJECT_KEY }}
  CLUSTER_NAME: ass-cluster
  CLUSTER_REGION: us-central1-c
  GRGIT_USER: ${{ github.actor }}
  GRGIT_PASS: ${{ secrets.TOKEN }}
jobs:
  clean-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old image
        uses: smartsquaregmbh/delete-old-packages@v0.5.0
        with:
          token: ${{ env.GRGIT_PASS }}
          type: container
          organization: InvoiceEase
          keep: 1
          version-pattern: ^${{ env.ENV_DEPLOY }}-[a-zA-Z0-9]*
          names: |
            ${{ github.event.repository.name }}
  ci-cd-dev-env:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APPID: ${{ secrets.FIREBASE_APPID }}
      NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
      NEXT_PUBLIC_BE_ADMIN_API: ${{ secrets.ADMIN_API }}
      NEXT_PUBLIC_BE_ACCOUNTANT_API: ${{ secrets.ACCOUNTANT_API }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Build Next.js app
        run: yarn build

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.ENV_DEPLOY }}-${{ github.sha }}

      - name: Authenticate with Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_PROJECT_KEY }}'

      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'

      - name: Use gcloud cli
        run: gcloud info

      - name: Set GKE Cluster
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}

      - name: Update deployment with new image
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_NAME }}:${{ env.ENV_DEPLOY }}-${{ github.sha }}

      - name: Generate discord_notification.json
        if: ${{ always() }}
        run: |
          bash generate_discord_notification.sh "${JOB_STATUS}" "${GITHUB_EVENT_NAME}" "${GITHUB_EVENT_HEAD_COMMIT_TIMESTAMP}" "${GITHUB_EVENT_PULL_REQUEST_UPDATED_AT}" "${GITHUB_EVENT_HEAD_COMMIT_URL}" "${GITHUB_EVENT_PULL_REQUEST_HTML_URL}" "${GITHUB_COMMIT_MESSAGE}" "${GITHUB_REPO_NAME}"
        env:
          JOB_STATUS: ${{ job.status }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_HEAD_COMMIT_TIMESTAMP: ${{ github.event.head_commit.timestamp }}
          GITHUB_EVENT_PULL_REQUEST_UPDATED_AT: ${{ github.event.pull_request.updated_at }}
          GITHUB_EVENT_HEAD_COMMIT_URL: ${{ github.event.head_commit.url }}
          GITHUB_EVENT_PULL_REQUEST_HTML_URL: ${{ github.event.pull_request.html_url }}\
          GITHUB_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          GITHUB_REPO_NAME: ${{ github.repository }}

      - name: Send notification to Discord
        if: ${{ always() }}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          raw-data: ./discord_notification.json
